#!/usr/bin/env bash
# Copyright (C) 2020 Ulises Jeremias Cornejo Fandos

install_base() {
  op_title="${install_op_msg}"
  base_install=$(tr <<<"${base_install}" " " "\n" | sort | uniq | tr "\n" " ")
  pacman -Sy --print-format='%s' $(echo "${base_install}") | awk '{s+=$1} END {print s/1024/1024}' >/tmp/size &
  pid=$! pri=0.6 msg="\n${pacman_load} \n\n \Z1> \Z2pacman -Sy\Zn" load
  download_size="$(</tmp/size)"
  rm /tmp/size
  export software_size
  software_size=$(sed <<<"${download_size}" 's/\(\..\)\(.*\)/\1 MiB/')
  cal_rate

  if [ "$(wc -w <<<"${base_install}")" -gt "30" ]; then
    height="24"
  elif [ "$(wc -w <<<"${base_install}")" -gt "25" ]; then
    height="20"
  elif [ "$(wc -w <<<"${base_install}")" -gt "20" ]; then
    height="18"
  else
    height="16"
  fi

  until "${INSTALLED}"; do
    if (yesno "\n${install_var}" "${install}" "${cancel}"); then
      echo "$(date -u "+%F %H:%M") : Begin base install" >>"${log}"

      if [ "${kernel}" == "linux" ]; then
        base_install="$(pacman -Sqg base linux) ${base_install}"
      else
        base_install="$(pacman -Sqg base linux | sed 's/^linux$//') ${base_install}"
      fi

      (
        pacstrap "${ARCH}" --overwrite $(echo "${base_install}")
        echo "$?" >/tmp/ex_status
      ) &>>"${log}" &
      pid=$! pri=$(echo "${down}" | sed 's/\..*$//') msg="\n${install_load_var}" load_log

      genfstab -U -p "${ARCH}" >>"${ARCH}"/etc/fstab

      if [ "$(</tmp/ex_status)" -eq "0" ]; then
        INSTALLED=true
        echo "$(date -u "+%F %H:%M") : Install Complete" >>"${log}"
        echo "$(date -u "+%F %H:%M") : Generate fstab:\n$(<${ARCH}/etc/fstab)" >>"${log}"
      else
        msg "\n${failed_msg}"
        echo "$(date -u "+%F %H:%M") : Install failed: please report to developer" >>"${log}"
        reset
        tail "${log}"
        exit 1
      fi

      case "${bootloader}" in
      grub) grub_config ;;
      syslinux) syslinux_config ;;
      systemd-boot) systemd_config ;;
      efistub) efistub_config ;;
      refind) refind_config ;;
      esac

      echo "$(date -u "+%F %H:%M") : Configured bootloader: ${bootloader}" >>"${log}"
    else
      if (yesno "\n${exit_msg}" "${yes}" "${no}"); then
        unset base_install DE
        desktop=false
        main_menu
      fi
    fi
  done
}

install_options() {
  op_title="${install_op_msg}"
  while (true); do
    install_opt=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${install_opt_msg}" 14 80 5 \
      "ArchRoyal-Desktop" "${install_opt1}" \
      "ArchRoyal-Desktop-LTS" "${install_opt2}" \
      "ArchRoyal-Server" "${install_opt3}" \
      "ArchRoyal-Server-LTS" "${install_opt4}" \
      "ArchRoyal-Advanced" "${install_opt0}" 3>&1 1>&2 2>&3)
    if [ "$?" -gt "0" ]; then
      if (yesno "\n${exit_msg}" "${yes}" "${no}" 1); then
        main_menu
      fi
    else
      break
    fi
  done

  case "${install_opt}" in
  ArchRoyal-Advanced)
    prepare_base
    graphics
    ;;
  *)
    quick_install
    ;;
  esac
}

prepare_base() {
  op_title="${install_op_msg}"
  while (true); do
    install_menu=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${install_type_msg}" 17 69 8 \
      "Arch-Linux-Base" "${base_msg0}" \
      "Arch-Linux-Base-Devel" "${base_msg1}" \
      "Arch-Linux-Hardened" "${hardened_msg0}" \
      "Arch-Linux-Hardened-Devel" "${hardened_msg1}" \
      "Arch-Linux-LTS-Base" "${LTS_msg0}" \
      "Arch-Linux-LTS-Base-Devel" "${LTS_msg1}" \
      "Arch-Linux-Zen" "${zen_msg0}" \
      "Arch-Linux-Zen-Devel" "${zen_msg1}" 3>&1 1>&2 2>&3)
    if [ "$?" -gt "0" ]; then
      if (yesno "\n${exit_msg}" "${yes}" "${no}" 1); then
        main_menu
      fi
    else
      break
    fi
  done

  case "${install_menu}" in
  "Arch-Linux-Base")
    base_install="base linux linux-headers ${base_defaults} "
    kernel="linux"
    ;;
  "Arch-Linux-Base-Devel")
    base_install="base-devel linux linux-headers ${base_defaults} "
    kernel="linux"
    ;;
  "Arch-Linux-Hardened")
    base_install="base linux-hardened linux-hardened-headers ${base_defaults} "
    kernel="linux-hardened"
    ;;
  "Arch-Linux-Hardened-Devel")
    base_install="base-devel linux-hardened linux-hardened-headers linux-firmware ${base_defaults} "
    kernel="linux-hardened"
    ;;
  "Arch-Linux-LTS-Base")
    base_install="base linux-lts linux-lts-headers ${base_defaults} "
    kernel="linux-lts"
    ;;
  "Arch-Linux-LTS-Base-Devel")
    base_install="base-devel linux-lts linux-lts-headers ${base_defaults} "
    kernel="linux-lts"
    ;;
  "Arch-Linux-Zen")
    base_install="base linux-zen linux-zen-headers ${base_defaults} "
    kernel="linux-zen"
    ;;
  "Arch-Linux-Zen-Devel")
    base_install="base-devel linux-zen linux-zen-headers ${base_defaults} "
    kernel="linux-zen"
    ;;
  esac

  while (true); do
    shell=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${shell_msg}" 16 64 6 \
      "bash" "${shell5}" \
      "dash" "${shell0}" \
      "fish" "${shell1}" \
      "mksh" "${shell2}" \
      "tcsh" "${shell3}" \
      "zsh" "${shell4}" 3>&1 1>&2 2>&3)
    if [ "$?" -gt "0" ]; then
      if (yesno "\n${exit_msg}" "${yes}" "${no}" 1); then
        main_menu
      fi
    else
      case "${shell}" in
      bash)
        sh="/bin/bash" shell="bash-completion"
        ;;
      fish)
        sh="/bin/fish"
        ;;
      zsh)
        shrc=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "\n${shrc_msg}" 13 65 4 \
          "${default}" "${shrc_msg1}" \
          "grml-zsh-config" "${shrc_msg4}" \
          "${none}" "${shrc_msg3}" 3>&1 1>&2 2>&3)
        if [ "$?" -gt "0" ]; then
          shrc="${default}"
        fi

        sh="/usr/bin/${shell}" shell="zsh zsh-syntax-highlighting"

        if [ "${shrc}" == "grml-zsh-config" ]; then
          shell+=" grml-zsh-config zsh-completions"
        fi
        ;;
      *)
        sh="/bin/${shell}"
        ;;
      esac

      base_install+="${shell} "
      break
    fi
  done

  # Bootloader selection
  base_install+="${UCODE} "
  while (true); do
    if "${UEFI}"; then
      bootloader=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${loader_type_msg}" 13 64 4 \
        "grub" "${loader_msg}" \
        "syslinux" "${loader_msg1}" \
        "systemd-boot" "${loader_msg2}" \
        "efistub" "${loader_msg3}" \
        "refind" "${loader_msg4}" \
        "${none}" "-" 3>&1 1>&2 2>&3)
      ex="$?"
    else
      bootloader=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${loader_type_msg}" 12 64 3 \
        "grub" "${loader_msg}" \
        "syslinux" "${loader_msg1}" \
        "${none}" "-" 3>&1 1>&2 2>&3)
      ex="$?"
    fi

    if [ "${ex}" -gt "0" ]; then
      if (yesno "\n${exit_msg}" "${yes}" "${no}" 1); then
        main_menu
      fi
    elif [ "${bootloader}" == "systemd-boot" ]; then
      break
    elif [ "${bootloader}" == "efistub" ]; then
      break
    elif [ "${bootloader}" == "refind" ]; then
      base_install+="refind "
      break
    elif [ "${bootloader}" == "syslinux" ]; then
      if ! "${UEFI}"; then
        if (tune2fs -l /dev/"${BOOT}" | grep "64bit" &>/dev/null); then
          if (yesno "\n${syslinux_warn_msg}" "${yes}" "${no}"); then
            mnt=$(df | grep -w "${BOOT}" | awk '{print $6}')
            (
              umount "${mnt}"
              wipefs -a /dev/"${BOOT}"
              mkfs.ext4 -O \^64bit /dev/"${BOOT}"
              mount /dev/"${BOOT}" "${mnt}"
            ) &>/dev/null &
            pid=$! pri=0.1 msg="\n${boot_load} \n\n \Z1> \Z2mkfs.ext4 -O ^64bit /dev/${BOOT}\Zn" load
            base_install+="${bootloader} "
            break
          fi
        else
          base_install+="${bootloader} "
          break
        fi
      else
        base_install+="${bootloader} "
        break
      fi
    elif [ "${bootloader}" == "grub" ]; then
      base_install+="${bootloader} "
      break
    else
      if (yesno "\n${grub_warn_msg0}" "${yes}" "${no}" 1); then
        msg "\n${grub_warn_msg1}"
        break
      fi
    fi
  done

  while (true); do
    net_util=$(dialog --ok-button "${ok}" --cancel-button "${cancel}" --menu "${wifi_util_msg}" 13 64 3 \
      "networkmanager" "${net_util_msg1}" \
      "netctl" "${net_util_msg0}" \
      "${none}" "-" 3>&1 1>&2 2>&3)

    if [ "$?" -gt "0" ]; then
      if (yesno "\n${exit_msg}" "${yes}" "${no}" 1); then
        main_menu
      fi
    else
      if [ "${net_util}" == "netctl" ] || [ "${net_util}" == "networkmanager" ]; then
        base_install+="${net_util} dialog " enable_nm=true
      fi
      break
    fi
  done

  if (yesno "\n\n${multilib_msg}" "${yes}" "${no}"); then
    multilib=true
    echo "$(date -u "+%F %H:%M") : Include multilib" >>"${log}"
  fi

  if (yesno "\n\n${dhcp_msg}" "${yes}" "${no}"); then
    dhcp=true
    echo "$(date -u "+%F %H:%M") : Enable dhcp" >>"${log}"
  fi

  if "${wifi}"; then
    base_install+="wireless_tools wpa_supplicant "
  else
    if (yesno "\n${wifi_option_msg}" "${yes}" "${no}" 1); then
      base_install+="wireless_tools wpa_supplicant "
    fi
  fi

  if "${bluetooth}"; then
    if (yesno "\n${bluetooth_msg}" "${yes}" "${no}" 1); then
      base_install+="bluez bluez-utils pulseaudio-bluetooth "
      enable_bt=true
    fi
  fi

  if (yesno "\n${pppoe_msg}" "${yes}" "${no}" 1); then
    base_install+="rp-pppoe "
  fi

  if (yesno "\n${os_prober_msg}" "${yes}" "${no}" 1); then
    base_install+="os-prober "
  fi

  if "${enable_f2fs}"; then
    base_install+="f2fs-tools "
  fi

  if "${UEFI}"; then
    base_install+="efibootmgr "
  fi
}
