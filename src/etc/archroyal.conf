# Copyright (C) 2020 Ulises Jeremias Cornejo Fandos

config() {
  # Set default variables
  export ARCH=/mnt
  export wifi=false
  export SWAP=false
  export crypted=false
  export GPT=false
  export UEFI=false
  export mounted=false
  export INSTALLED=false
  export bootloader=false
  export frmt=false
  export input=default
  export btrfs=true
  export vfat=false
  export add_repo=false
  export enable_bt=false
  export enable_f2fs=false
  export enable_btrfs=false
  export enable_nm=false
  export enable_dm=false
  export config_piano=false
  export err=false
  export skip=false
  export multilib=false
  export dhcp=false
  export manual_part=default
  export desktop=false
  export reload=false
  export menu_enter=false
  export colors=true
  export screen_h=true
  export VM=false
  export USB=none
  export bluetooth=false
  export drm=false
  export NVIDIA=false
  export GTK3=false
  export enable_ssh=false
  export enable_http=false
  export enable_ftp=false
  export enable_cups=false
  export OnLine=false
  export LAPTOP=false

  # ArchRoyal tmp directory
  if [ ! -d /tmp/archroyal ]; then
    mkdir /tmp/archroyal
  fi

  # Log and tmp files
  export log=/tmp/archroyal.log
  export tmp_menu=/tmp/archroyal/part.sh
  export tmp_list=/tmp/archroyal/part.list
  export tmp_passwd=/tmp/archroyal/passwd

  # Check for passwd file
  if [ -f "${tmp_passwd}" ]; then
    rm "${tmp_passwd}"
  fi

  touch "${tmp_passwd}"

  # Set default shell
  export sh=/bin/bash

  # Generate SSL key
  export ssl_key="$(openssl rand -base64 32)"

  # Set term color valules
  Green=$'\e[0;32m'
  Yellow=$'\e[0;33m'
  Red=$'\e[0;31m'
  Blue=$'\e[34m'
  ColorOff=$'\e[0m'

  if "${colors}"; then
    # Set default color scheme for installer
    tput civis
    echo -en "\e]P0073642"
    clear #black
    echo -en "\e]P8002B36"
    clear #darkgrey
    echo -en "\e]P1DC322F"
    clear #darkred
    echo -en "\e]P9CB4B16"
    clear #red
    echo -en "\e]P2859900"
    clear #darkgreen
    echo -en "\e]PA586E75"
    clear #green
    echo -en "\e]P3B58900"
    clear #brown
    echo -en "\e]PB657B83"
    clear #yellow
    echo -en "\e]P4268BD2"
    clear #darkblue
    echo -en "\e]PC839496"
    clear #blue
    echo -en "\e]P5D33682"
    clear #darkmagenta
    echo -en "\e]PD6C71C4"
    clear #magenta
    echo -en "\e]P62AA198"
    clear #darkcyan
    echo -en "\e]PE93A1A1"
    clear #cyan
    echo -en "\e]P7EEE8D5"
    clear #lightgrey
    echo -en "\e]PFFDF6E3"
    clear #white
    setterm -background black
    setterm -foreground white
    tput cnorm
  else
    mv /root/.dialogrc /root/.dialogrc-disabled
  fi

  # Default packages
  export base_defaults="bash bzip2 coreutils file filesystem findutils gawk gcc-libs gettext glibc grep gzip inetutils iproute2 iputils licenses pacman pciutils procps-ng psmisc sed shadow systemd systemd-sysvcompat tar util-linux xz wget vim cpupower linux-firmware man-db man-pages texinfo sudo btrfs-progs dosfstools e2fsprogs ntfs-3g lvm2"

  # Desktop packages
  export de_defaults="xdg-user-dirs xorg-server xorg-apps xorg-xinit xterm ttf-dejavu gvfs gvfs-smb gvfs-mtp pulseaudio pavucontrol pulseaudio-alsa alsa-utils unzip"
  export extras="gvfs arc-gtk-theme arc-icon-theme elementary-icon-theme htop lynx chromium libreoffice-fresh vlc gnome-packagekit pantheon-music"

  # Check terminal line height
  if [ "$(tput lines)" -lt 25 ]; then
    export screen_h=false
  fi

  # Check if install media is USB
  if (lsblk | grep "run" | grep -o "sd." &>/dev/null); then
    export USB="$(lsblk | grep "run" | grep -o "sd.")"
  fi

  # Check for bluetooth device
  if (dmesg | grep -i "blue" &>/dev/null); then
    export bluetooth=true
  fi

  # List of timezones
  export zonelist="$(find /usr/share/zoneinfo -maxdepth 1 | sed -n -e 's!^.*/!!p' | grep -v "posix\|right\|zoneinfo\|zone.tab\|zone1970.tab\|W-SU\|WET\|posixrules\|MST7MDT\|iso3166.tab\|CST6CDT" | sort | sed 's/$/ -/g')"

  # Full list of locales
  export localelist="$(grep -E "^#?[a-z].*UTF-8" /etc/locale.gen | sed 's/#//' | awk '{print $1" -"}')"

  # List of countries for mirrorlist update
  export countries=$(echo -e "AS All-Https\n AT Austria\n AU  Australia\n BD Bangladesh\n BE Belgium\n BG Bulgaria\n BR Brazil\n BY Belarus\n CA Canada\n CL Chile \n CN China\n CO Colombia\n CZ Czech-Republic\n DE Germany\n DK Denmark\n EE Estonia\n ES Spain\n FI Finland\n FR France\n GB United-Kingdom\n HU Hungary\n IE Ireland\n IL Isreal\n IN India\n IT Italy\n JP Japan\n KR Korea\n KZ Kazakhstan\n LK Sri-Lanka\n LU Luxembourg\n LV Latvia\n MK Macedonia\n NC New-Caledonia\n NL Netherlands\n NO Norway\n NZ New-Zealand\n PL Poland\n PT Portugal\n RO Romania\n RS Serbia\n RU Russia\n SE Sweden\n CH Switzerland\n SG Singapore\n SK Slovakia\n SI Slovenia\n TR Turkey\n TW Taiwan\n UA Ukraine\n US United-States\n UZ Uzbekistan\n VN Viet-Nam\n ZA South-Africa")

  # Full list of keymaps
  export key_maps="$(find /usr/share/kbd/keymaps -type f | sed -n -e 's!^.*/!!p' | grep ".map.gz" | sed 's/.map.gz//g' | sed 's/$/ -/g' | sort)"

  # List of default mountpoints for manual partitioning
  export points_orig=$(echo -e "/boot   boot-mountpoint>\n/home   home-mountpoint>\n/opt   opt-mountpoint>\n/srv   srv-mountpoint>\n/usr    usr-mountpoint>\n/var    var-mountpoint>")

  # Check for laptop
  if (acpi | egrep "*" &>/dev/null); then
    export LAPTOP=true
  fi

  # Check for wifi network
  export wifi_network=$(ip addr | grep "wlp\|wlo\|wlan" | awk '{print $2}' | sed 's/://' | head -n 1)

  if [ -n "${wifi_network}" ]; then
    export wifi=true
  fi

  # Check for VM
  case "$(systemd-detect-virt)" in
  oracle)
    export virt="vbox"
    export VM=true
    ;;
  vmware)
    export virt="vmware"
    export VM=true
    ;;
  qemu)
    export virt="qemu"
    export VM=true
    ;;
  kvm)
    export virt="kvm"
    export VM=true
    ;;
  microsoft)
    export virt="hyper-v"
    export VM=true
    ;;
  xen)
    export virt="xen"
    export VM=true
    ;;
  esac

  # Check Microcodes
  if grep -q 'AuthenticAMD' /proc/cpuinfo; then
    export UCODE="amd-ucode"
  elif grep -q 'GenuineIntel' /proc/cpuinfo; then
    export UCODE="intel-ucode"
  fi

  # Check VGA
  if ! "${VM}"; then
    if (lspci | grep VGA | grep "Intel" &>/dev/null); then
      export default_GPU="xf86-video-intel"
      export chipset="Intel"
    elif (lspci | grep VGA | grep "ATI\|AMD" &>/dev/null); then
      export default_GPU="xf86-video-ati"
      export chipset="AMD/ATI"
    elif (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
      export NVIDIA=true default_GPU="xf86-video-nouveau"
      export chipset="Nvidia"
    else
      export default_GPU="xf86-video-vesa"
      export chipset="Unknown"
    fi
  fi

  # Pacman Hooks

  # linux hook
  export linux_hook="[Trigger]
  Operation = Install
  Operation = Upgrade
  Type = Package
  Target = linux

  [Action]
  When = PostTransaction"

  # LTS linux hook
  export lts_hook="[Trigger]
  Operation = Install
  Operation = Upgrade
  Type = Package
  Target = linux-lts

  [Action]
  When = PostTransaction"

  # Hardened linux hook
  export hardened_hook="[Trigger]
  Operation = Install
  Operation = Upgrade
  Type = Package
  Target = linux-hardened

  [Action]
  When = PostTransaction"

  # Zen linux hook
  export zen_hook="[Trigger]
  Operation = Install
  Operation = Upgrade
  Type = Package
  Target = linux-zen

  [Action]
  When = PostTransaction"

  # NVIDIA hook
  export nvidia_hook="[Trigger]
  Operation = Install
  Operation = Upgrade
  Operation = Remove
  Type = Package
  Target = nvidia

  [Action]
  Depends = mkinitcpio
  When = PostTransaction"
}

# Source all variables
config
